<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.render.ShaderModule" version="1">
	<text><![CDATA[#using \{935D9DEF-A5F9-4D4B-85BE-9F2E059662BB}

#define TAPS 16

bool Clipped(vec2 uv)
{
	return uv.x < 0.0f || uv.y < 0.0f || uv.x > 1.0f || uv.y > 1.0f;
}

vec4 ColorClamp(in texture2D currentFrame, in sampler currentSampler, vec4 currentColor, vec4 historyColor, vec2 uv)
{
	const vec4 n[] =
	{
		textureOffset(sampler2D(currentFrame, currentSampler), uv, ivec2(-1, 0)),
		textureOffset(sampler2D(currentFrame, currentSampler), uv, ivec2( 1, 0)),
		textureOffset(sampler2D(currentFrame, currentSampler), uv, ivec2(0, -1)),
		textureOffset(sampler2D(currentFrame, currentSampler), uv, ivec2(0,  1)),
		textureOffset(sampler2D(currentFrame, currentSampler), uv, ivec2(-1,  1)),
		textureOffset(sampler2D(currentFrame, currentSampler), uv, ivec2( 1,  1)),
		textureOffset(sampler2D(currentFrame, currentSampler), uv, ivec2(-1, -1)),
		textureOffset(sampler2D(currentFrame, currentSampler), uv, ivec2( 1, -1))
	};

	vec4 bmn = currentColor;
	vec4 bmx = currentColor;

	for (int i = 0; i < 8; ++i)
	{
		bmn = min(bmn, n[i]);
		bmx = max(bmx, n[i]);
	}

	return clamp(historyColor, bmn, bmx);
}

vec4 TemporalAntiAlias(
	in texture2D currentFrame,
	in texture2D previousFrame,
	in texture2D velocity,
	in texture2D depth,
	vec4 jitter,
	vec2 uv
)
{
	const float f = 1.0f / TAPS;

	// Get velocity of current pixel, in NDC space.
	const vec2 v = texture(sampler2D(velocity, __pointSampler__), uv).xy;

	// Convert velocity to UV space.
	const vec2 Vuv = v * vec2(-0.5f, 0.5f);

	// Sample current colour.
	const vec4 cc = texture(sampler2D(currentFrame, __pointSampler__), uv);

	// Blend with previous colour.
	if (!Clipped(uv - Vuv))
	{
		// Get velocity of previous pixel, in NDC space.
		const vec2 pv = texture(sampler2D(velocity, __linearSampler__), uv - Vuv).xy;
		
		// Sample previous colour,
		const vec4 cp = CatmullRomFilterSample(previousFrame, __linearSampler__, uv - Vuv); // + jitter.xy);

		// Clamp previous colour to current color neighbourhood.
		vec4 ccp = ColorClamp(currentFrame, __pointSampler__, cc, cp, uv);

		// Compare velocities; if wastly different then don't merge samples.
		const float fr = clamp(length(pv - v) * 40.0f, 0.0f, 1.0f);
		ccp = cc * fr + ccp * (1.0f - fr);

		return cc * f + ccp * (1.0f - f);
	}

	return cc;
}

	
	]]></text>
	<samplers>
		<item>
			<first>__linearSampler__</first>
			<second>
				<minFilter>Linear</minFilter>
				<mipFilter>Linear</mipFilter>
				<magFilter>Linear</magFilter>
				<addressU>Clamp</addressU>
				<addressV>Clamp</addressV>
				<addressW>Clamp</addressW>
				<compare>None</compare>
				<mipBias>0</mipBias>
				<ignoreMips>true</ignoreMips>
				<useAnisotropic>false</useAnisotropic>
			</second>
		</item>
		<item>
			<first>__pointSampler__</first>
			<second>
				<minFilter>Point</minFilter>
				<mipFilter>Point</mipFilter>
				<magFilter>Point</magFilter>
				<addressU>Clamp</addressU>
				<addressV>Clamp</addressV>
				<addressW>Clamp</addressW>
				<compare>None</compare>
				<mipBias>0</mipBias>
				<ignoreMips>true</ignoreMips>
				<useAnisotropic>false</useAnisotropic>
			</second>
		</item>
	</samplers>
</object>
