<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.render.ShaderModule">
	<text>
	<![CDATA[
#define TAPS 16

bool Clipped(vec2 uv)
{
	return uv.x < 0.0f || uv.y < 0.0f || uv.x > 1.0f || uv.y > 1.0f;
}

vec4 ColorClamp(in texture2D currentFrame, in sampler currentSampler, vec4 currentColor, vec4 historyColor, vec2 uv)
{
	const vec4 n0 = textureOffset(sampler2D(currentFrame, currentSampler), uv, ivec2(-1, 0));
	const vec4 n1 = textureOffset(sampler2D(currentFrame, currentSampler), uv, ivec2( 1, 0));
	const vec4 n2 = textureOffset(sampler2D(currentFrame, currentSampler), uv, ivec2(0, -1));
	const vec4 n3 = textureOffset(sampler2D(currentFrame, currentSampler), uv, ivec2(0,  1));

	const vec4 bmn = min(currentColor, min(n0, min(n1, min(n2, n3))));
	const vec4 bmx = max(currentColor, max(n0, max(n1, max(n2, n3))));

	const vec4 Emn = vec4(0.01f.xxx, 0.0f);
	const vec4 Emx = vec4(0.001f.xxx, 0.0f);

	return clamp(historyColor, bmn - Emn, bmx + Emx);
}

vec4 CatmullRomFilterSample(in texture2D tx, in sampler smp, vec2 uv)
{
	// return texture(sampler2D(tex, smp), uv);
	
#define TEX sampler2D(tx, smp)

	vec2 texsiz = vec2(textureSize( TEX, 0 ).xy);
	vec4 rtMetrics = vec4(1.0f / texsiz.xy, texsiz.xy);

	vec2 position = rtMetrics.zw * uv;
	vec2 centerPosition = floor(position - 0.5f) + 0.5f;
	vec2 f = position - centerPosition;
	vec2 f2 = f * f;
	vec2 f3 = f * f2;

	const float c = 0.5f; //note: [0;1] ( SMAA_FILMIC_REPROJECTION_SHARPNESS / 100.0 )
	vec2 w0 =         -c  * f3 +  2.0f * c         * f2 - c * f;
	vec2 w1 =  (2.0f - c) * f3 - (3.0f - c)        * f2 + 1.0f;
	vec2 w2 = -(2.0f - c) * f3 + (3.0f - 2.0f * c) * f2 + c * f;
	vec2 w3 =          c  * f3 -                 c * f2;

	vec2 w12 = w1 + w2;
	vec2 tc12 = rtMetrics.xy * (centerPosition + w2 / w12);
	vec3 centerColor = textureLod(TEX, vec2(tc12.x, tc12.y), 0).rgb;

	vec2 tc0 = rtMetrics.xy * (centerPosition - 1.0);
	vec2 tc3 = rtMetrics.xy * (centerPosition + 2.0);
	vec4 color =
		vec4(textureLod(TEX, vec2(tc12.x, tc0.y ), 0).rgb, 1.0f) * (w12.x * w0.y ) +
		 vec4(textureLod(TEX, vec2(tc0.x, tc12.y), 0).rgb, 1.0f) * (w0.x  * w12.y) +
		 vec4(centerColor,                                 1.0f) * (w12.x * w12.y) +
		 vec4(textureLod(TEX, vec2(tc3.x, tc12.y), 0).rgb, 1.0f) * (w3.x  * w12.y) +
		 vec4(textureLod(TEX, vec2(tc12.x, tc3.y ), 0).rgb, 1.0f) * (w12.x * w3.y );

	return vec4(color.rgb / color.a, 1.0f);
}

vec4 TemporalAntiAlias(
	in texture2D currentFrame,
	in texture2D previousFrame,
	in texture2D velocity,
	in texture2D depth,
	in sampler pointSampler,
	in sampler linearSampler,
	vec4 jitter,
	vec2 uv
)
{
	const float f = 1.0f / TAPS;

	// Get velocity of current pixel, in NDC space.
	const vec2 v = texture(sampler2D(velocity, pointSampler), uv).xy;

	// Convert velocity to UV space.
	const vec2 Vuv = v * vec2(-0.5f, 0.5f);

	// Sample current colour.
	const vec4 cc = texture(sampler2D(currentFrame, linearSampler), uv);

	// Blend with previous colour.
	if (!Clipped(uv - Vuv))
	{
		// Get velocity of previous pixel, in NDC space.
		const vec2 pv = texture(sampler2D(velocity, pointSampler), uv - Vuv).xy;
		
		// Sample previous colour,
		const vec4 cp = CatmullRomFilterSample(previousFrame, linearSampler, uv - Vuv); // + jitter.xy);

		// Clamp previous colour to current color neighbourhood.
		vec4 ccp = ColorClamp(currentFrame, linearSampler, cc, cp, uv);

		// Compare velocities; if wastly different then don't merge samples.
		const float fr = clamp(length(pv - v) * 40.0f, 0.0f, 1.0f);
		ccp = cc * fr + ccp * (1.0f - fr);

		return cc * f + ccp * (1.0f - f);
	}

	return cc;
}

	]]>
	</text>
</object>
