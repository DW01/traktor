<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.render.ShaderModule" version="1">
	<text><![CDATA[
	
// Default configuration of rays.
const float HWRT_DefaultNear = 0.5f;
const float HWRT_DefaultFar = 100.0f;

// Material properties.
struct HWRT_Material
{
	vec4 normal;
	vec4 albedo;
	vec2 texCoord;
	int albedoMap;
	int pad;
};

layout (std430, binding = 2, set = 3) readonly buffer __bindlessBufferMaterials__Buffer
{
	HWRT_Material perVertex[];
}
__bindlessBufferMaterials__[];

layout (binding = 0, set = 1) uniform texture2D __bindlessTextures2D__[];

vec4 blend3(vec4 v0, float w0, vec4 v1, float w1, vec4 v2, float w2)
{
	return v0 * w0 + v1 * w1 + v2 * w2;
}

void HWRT_ResolveAlbedo(inout HWRT_Material m)
{
	if (m.albedoMap.x >= 0)
	{
		m.albedo = textureLod(sampler2D(__bindlessTextures2D__[m.albedoMap], __samplerLinear__), m.texCoord.xy, 0.0f);
	}
}

HWRT_Material HWRT_GetMaterial(rayQueryEXT query)
{
	HWRT_Material material;
	material.normal = vec4(0.0f, 1.0f, 0.0f, 0.0f);
	material.albedo = vec4(0.0f);

	if(rayQueryGetIntersectionTypeEXT(query, true) != gl_RayQueryCommittedIntersectionNoneEXT)
	{
		const uint id = rayQueryGetIntersectionInstanceCustomIndexEXT(query, true);
		if (id != (1 << 24) - 1)
		{
			const vec2 bary = rayQueryGetIntersectionBarycentricsEXT(query, true);
			const uint triangle = rayQueryGetIntersectionPrimitiveIndexEXT(query, true);

			// Get material information for each vertex.
			HWRT_Material m0 = __bindlessBufferMaterials__[id].perVertex[triangle * 3 + 0];
			HWRT_Material m1 = __bindlessBufferMaterials__[id].perVertex[triangle * 3 + 1];
			HWRT_Material m2 = __bindlessBufferMaterials__[id].perVertex[triangle * 3 + 2];

			// Blend material using barycentrics from intersection.
			material.normal = normalize(blend3(
				m0.normal, 1.0f - (bary.x + bary.y),
				m1.normal, bary.x,
				m2.normal, bary.y
			));
			material.albedo = blend3(
				m0.albedo, 1.0f - (bary.x + bary.y),
				m1.albedo, bary.x,
				m2.albedo, bary.y
			);

			// Read albedo map.
			if (m0.albedoMap >= 0)
			{
				const vec2 uv = m0.texCoord.xy * (1.0f - (bary.x + bary.y)) + m1.texCoord.xy * bary.x + m2.texCoord.xy * bary.y;
				material.albedo = textureLod(sampler2D(__bindlessTextures2D__[m0.albedoMap], __samplerLinear__), uv, 4.0f);
			}

			// Transform normal into world space.
			const mat4x3 o2w = rayQueryGetIntersectionObjectToWorldEXT(query, true);
			material.normal = vec4(o2w * material.normal, 0.0f);
		}
		else
		{
			// No assigned material; return default.
			material.albedo = vec4(0.25f, 0.25f, 0.25f, 1.0f);
		}
	}

	return material;
}

bool HWRT_Trace(accelerationStructureEXT AS, vec3 origin, vec3 direction, out HWRT_Material material, out float distance)
{
	rayQueryEXT rayQuery;
	rayQueryInitializeEXT(
		rayQuery,
		AS,
		gl_RayFlagsOpaqueEXT,
		0xff,
		origin,
		0.01f,
		direction,
		50.0f
	);
	while(rayQueryProceedEXT(rayQuery));

	if (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionNoneEXT)
		return false;

	material = HWRT_GetMaterial(rayQuery);
	distance = rayQueryGetIntersectionTEXT(rayQuery, true);
	return true;
}

bool HWRT_TraceShadow(accelerationStructureEXT AS, vec3 origin, vec3 direction, float maxDistance)
{
	rayQueryEXT rayQueryShadow;
	rayQueryInitializeEXT(
		rayQueryShadow,
		AS,
		gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT,
		0xff,
		origin,
		0.05f,
		direction,
		maxDistance
	);
	while(rayQueryProceedEXT(rayQueryShadow));
	return (rayQueryGetIntersectionTypeEXT(rayQueryShadow, true) != gl_RayQueryCommittedIntersectionNoneEXT);
}

	
	]]></text>
	<samplers>
		<item>
			<first>__samplerLinear__</first>
			<second>
				<minFilter>Linear</minFilter>
				<mipFilter>Linear</mipFilter>
				<magFilter>Linear</magFilter>
				<addressU>Wrap</addressU>
				<addressV>Wrap</addressV>
				<addressW>Wrap</addressW>
				<compare>None</compare>
				<mipBias>0</mipBias>
				<ignoreMips>true</ignoreMips>
				<useAnisotropic>false</useAnisotropic>
			</second>
		</item>
	</samplers>
</object>
