<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.render.ShaderModule" version="2">
	<text><![CDATA[
	
const float PI = 3.142f;
const float TWO_PI = PI * 2.0f;
const float HALF_PI = PI / 2.0f;

// Check if X and Y are within [0;max] range.
bool CheckRange(ivec2 p, ivec2 mx)
{
	if (p.x < 0 || p.y < 0)
		return false;
	else if (p.x >= mx.x || p.y >= mx.y)
		return false;
	else
		return true;
}

vec4 AxisX(mat4 m)
{
	return m[0];
}

vec4 AxisY(mat4 m)
{
	return m[1];
}

vec4 AxisZ(mat4 m)
{
	return m[2];
}

float LerpXY(vec4 v, float f)
{
	return mix(v.x, v.y, f);
}

int MajorAxis(vec3 v)
{
	const vec3 av = abs(v);
	if (av.x > av.y)
		return (av.x > av.z) ? 0 : 2;
	else
		return (av.y > av.z) ? 1 : 2;
}

void OrthogonalFrame(vec3 d, out vec3 u, out vec3 v)
{
	const vec3 c_axises[] =
	{
		vec3(0.0f, 1.0f, 0.0f),
		vec3(0.0f, 0.0f, 1.0f),
		vec3(1.0f, 0.0f, 0.0f)
	};

	const int major = MajorAxis(d);
	u = normalize(cross(d, c_axises[major]));
	v = normalize(cross(u, d));
}

mat3 Rotate(vec3 axis, float angle)
{
	const float c = cos(angle);
	const float s = sin(angle);
	const float t = 1.0f - c;
	const vec3 tv = t * axis;
	return mat3(
		tv.x * axis.x + c,
		tv.x * axis.y + s * axis.z,
		tv.x * axis.z - s * axis.y,

		tv.x * axis.y - s * axis.z,
		tv.y * axis.y + c,
		tv.y * axis.z + s * axis.x,

		tv.x * axis.z + s * axis.y,
		tv.y * axis.z - s * axis.x,
		tv.z * axis.z + c
	);
}

vec2 Rotate2D(vec2 v, float angle)
{
	const float c = cos(angle);
	const float s = sin(angle);
	return vec2(
		v.x * c - v.y * s,
		v.x * s + v.y * c
	);
}

vec3 Sphere(vec2 rnd)
{
	const float z = 2.0f * rnd.x - 1.0f;
	const float t = 2.0f * 3.142f * rnd.y;
	const float w = sqrt(1.0f - z * z);
	const float x = w * cos(t);
	const float y = w * sin(t);
	return vec3(x, y, z);
}

vec3 Hemi(vec3 direction, vec2 rnd)
{
	vec3 ot = Sphere(rnd);
	if (dot(ot, direction) < 0.0f)
		ot = -ot;
	return ot;
}

vec3 LambertianDirection(vec3 direction, vec2 uv)
{
#if 1
	const float sin2_theta = uv.x;
	const float cos2_theta = 1.0f - sin2_theta;
	const float sin_theta = sqrt(sin2_theta);
	const float cos_theta = sqrt(cos2_theta);
	const float orientation = uv.y * TWO_PI;
	const vec3 ldir = vec3(sin_theta * cos(orientation), sin_theta * sin(orientation), cos_theta);

	vec3 u, v;
	OrthogonalFrame(direction, u, v);

	const mat3 Mrot = mat3(
		u,
		v,
		direction
	);
	return normalize(Mrot * ldir);
#else
   float theta = 6.283185f * uv.x;
   uv.y = 2.0f * uv.y - 1.0f;
   vec3 spherePoint = vec3(sqrt(1.0f - uv.y * uv.y) * vec2(cos(theta), sin(theta)), uv.y);
   return normalize(direction + spherePoint);
#endif
}


float LightAttenuation(float distance)
{
	const float a = 0.0f;
	const float b = 0.01f;
	const float c = 0.05f;
	return clamp(1.0f / (a + b * distance + c * distance * distance), 0.0f, 1.0f);
}

float LightAttenuation(float distance, float maxDistance)
{
	const float a = LightAttenuation(distance);
	const float b = clamp(1.0f - pow(distance / maxDistance, 4.0f), 0.0f, 1.0f);
	return a * b;
}
	]]></text>
	<samplers/>
	<structDeclarations/>
</object>
